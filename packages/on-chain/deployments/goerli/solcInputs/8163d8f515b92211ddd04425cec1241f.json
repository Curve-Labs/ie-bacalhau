{
  "language": "Solidity",
  "sources": {
    "@gnosis.pm/safe-contracts/contracts/common/Enum.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @title Enum - Collection of enums\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract Enum {\n    enum Operation {Call, DelegateCall}\n}\n"
    },
    "@gnosis.pm/safe-contracts/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @notice More details at https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@gnosis.pm/zodiac/contracts/core/Module.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\n\n/// @title Module Interface - A contract that can pass messages to a Module Manager contract if enabled by that contract.\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"../interfaces/IAvatar.sol\";\nimport \"../factory/FactoryFriendly.sol\";\nimport \"../guard/Guardable.sol\";\n\nabstract contract Module is FactoryFriendly, Guardable {\n    /// @dev Emitted each time the avatar is set.\n    event AvatarSet(address indexed previousAvatar, address indexed newAvatar);\n    /// @dev Emitted each time the Target is set.\n    event TargetSet(address indexed previousTarget, address indexed newTarget);\n\n    /// @dev Address that will ultimately execute function calls.\n    address public avatar;\n    /// @dev Address that this module will pass transactions to.\n    address public target;\n\n    /// @dev Sets the avatar to a new avatar (`newAvatar`).\n    /// @notice Can only be called by the current owner.\n    function setAvatar(address _avatar) public onlyOwner {\n        address previousAvatar = avatar;\n        avatar = _avatar;\n        emit AvatarSet(previousAvatar, _avatar);\n    }\n\n    /// @dev Sets the target to a new target (`newTarget`).\n    /// @notice Can only be called by the current owner.\n    function setTarget(address _target) public onlyOwner {\n        address previousTarget = target;\n        target = _target;\n        emit TargetSet(previousTarget, _target);\n    }\n\n    /// @dev Passes a transaction to be executed by the avatar.\n    /// @notice Can only be called by this contract.\n    /// @param to Destination address of module transaction.\n    /// @param value Ether value of module transaction.\n    /// @param data Data payload of module transaction.\n    /// @param operation Operation type of module transaction: 0 == call, 1 == delegate call.\n    function exec(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation\n    ) internal returns (bool success) {\n        /// check if a transactioon guard is enabled.\n        if (guard != address(0)) {\n            IGuard(guard).checkTransaction(\n                /// Transaction info used by module transactions\n                to,\n                value,\n                data,\n                operation,\n                /// Zero out the redundant transaction information only used for Safe multisig transctions\n                0,\n                0,\n                0,\n                address(0),\n                payable(0),\n                bytes(\"0x\"),\n                address(0)\n            );\n        }\n        success = IAvatar(target).execTransactionFromModule(\n            to,\n            value,\n            data,\n            operation\n        );\n        if (guard != address(0)) {\n            IGuard(guard).checkAfterExecution(bytes32(\"0x\"), success);\n        }\n        return success;\n    }\n\n    /// @dev Passes a transaction to be executed by the target and returns data.\n    /// @notice Can only be called by this contract.\n    /// @param to Destination address of module transaction.\n    /// @param value Ether value of module transaction.\n    /// @param data Data payload of module transaction.\n    /// @param operation Operation type of module transaction: 0 == call, 1 == delegate call.\n    function execAndReturnData(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation\n    ) internal returns (bool success, bytes memory returnData) {\n        /// check if a transactioon guard is enabled.\n        if (guard != address(0)) {\n            IGuard(guard).checkTransaction(\n                /// Transaction info used by module transactions\n                to,\n                value,\n                data,\n                operation,\n                /// Zero out the redundant transaction information only used for Safe multisig transctions\n                0,\n                0,\n                0,\n                address(0),\n                payable(0),\n                bytes(\"0x\"),\n                address(0)\n            );\n        }\n        (success, returnData) = IAvatar(target)\n            .execTransactionFromModuleReturnData(to, value, data, operation);\n        if (guard != address(0)) {\n            IGuard(guard).checkAfterExecution(bytes32(\"0x\"), success);\n        }\n        return (success, returnData);\n    }\n}\n"
    },
    "@gnosis.pm/zodiac/contracts/factory/FactoryFriendly.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\n\n/// @title Zodiac FactoryFriendly - A contract that allows other contracts to be initializable and pass bytes as arguments to define contract state\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nabstract contract FactoryFriendly is OwnableUpgradeable {\n    function setUp(bytes memory initializeParams) public virtual;\n}\n"
    },
    "@gnosis.pm/zodiac/contracts/guard/BaseGuard.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"@gnosis.pm/safe-contracts/contracts/common/Enum.sol\";\nimport \"@gnosis.pm/safe-contracts/contracts/interfaces/IERC165.sol\";\nimport \"../interfaces/IGuard.sol\";\n\nabstract contract BaseGuard is IERC165 {\n    function supportsInterface(bytes4 interfaceId)\n        external\n        pure\n        override\n        returns (bool)\n    {\n        return\n            interfaceId == type(IGuard).interfaceId || // 0xe6d7a83a\n            interfaceId == type(IERC165).interfaceId; // 0x01ffc9a7\n    }\n\n    /// Module transactions only use the first four parameters: to, value, data, and operation.\n    /// Module.sol hardcodes the remaining parameters as 0 since they are not used for module transactions.\n    /// This interface is used to maintain compatibilty with Gnosis Safe transaction guards.\n    function checkTransaction(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address payable refundReceiver,\n        bytes memory signatures,\n        address msgSender\n    ) external virtual;\n\n    function checkAfterExecution(bytes32 txHash, bool success) external virtual;\n}\n"
    },
    "@gnosis.pm/zodiac/contracts/guard/Guardable.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"@gnosis.pm/safe-contracts/contracts/common/Enum.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@gnosis.pm/safe-contracts/contracts/interfaces/IERC165.sol\";\nimport \"./BaseGuard.sol\";\n\n/// @title Guardable - A contract that manages fallback calls made to this contract\ncontract Guardable is OwnableUpgradeable {\n    event ChangedGuard(address guard);\n\n    address public guard;\n\n    /// @dev Set a guard that checks transactions before execution\n    /// @param _guard The address of the guard to be used or the 0 address to disable the guard\n    function setGuard(address _guard) external onlyOwner {\n        if (_guard != address(0)) {\n            require(\n                BaseGuard(_guard).supportsInterface(type(IGuard).interfaceId),\n                \"Guard does not implement IERC165\"\n            );\n        }\n        guard = _guard;\n        emit ChangedGuard(guard);\n    }\n\n    function getGuard() external view returns (address _guard) {\n        return guard;\n    }\n}\n"
    },
    "@gnosis.pm/zodiac/contracts/interfaces/IAvatar.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\n\n/// @title Zodiac Avatar - A contract that manages modules that can execute transactions via this contract.\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"@gnosis.pm/safe-contracts/contracts/common/Enum.sol\";\n\ninterface IAvatar {\n    /// @dev Enables a module on the avatar.\n    /// @notice Can only be called by the avatar.\n    /// @notice Modules should be stored as a linked list.\n    /// @notice Must emit EnabledModule(address module) if successful.\n    /// @param module Module to be enabled.\n    function enableModule(address module) external;\n\n    /// @dev Disables a module on the avatar.\n    /// @notice Can only be called by the avatar.\n    /// @notice Must emit DisabledModule(address module) if successful.\n    /// @param prevModule Address that pointed to the module to be removed in the linked list\n    /// @param module Module to be removed.\n    function disableModule(address prevModule, address module) external;\n\n    /// @dev Allows a Module to execute a transaction.\n    /// @notice Can only be called by an enabled module.\n    /// @notice Must emit ExecutionFromModuleSuccess(address module) if successful.\n    /// @notice Must emit ExecutionFromModuleFailure(address module) if unsuccessful.\n    /// @param to Destination address of module transaction.\n    /// @param value Ether value of module transaction.\n    /// @param data Data payload of module transaction.\n    /// @param operation Operation type of module transaction: 0 == call, 1 == delegate call.\n    function execTransactionFromModule(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation\n    ) external returns (bool success);\n\n    /// @dev Allows a Module to execute a transaction and return data\n    /// @notice Can only be called by an enabled module.\n    /// @notice Must emit ExecutionFromModuleSuccess(address module) if successful.\n    /// @notice Must emit ExecutionFromModuleFailure(address module) if unsuccessful.\n    /// @param to Destination address of module transaction.\n    /// @param value Ether value of module transaction.\n    /// @param data Data payload of module transaction.\n    /// @param operation Operation type of module transaction: 0 == call, 1 == delegate call.\n    function execTransactionFromModuleReturnData(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation\n    ) external returns (bool success, bytes memory returnData);\n\n    /// @dev Returns if an module is enabled\n    /// @return True if the module is enabled\n    function isModuleEnabled(address module) external view returns (bool);\n\n    /// @dev Returns array of modules.\n    /// @param start Start of the page.\n    /// @param pageSize Maximum number of modules that should be returned.\n    /// @return array Array of modules.\n    /// @return next Start of the next page.\n    function getModulesPaginated(address start, uint256 pageSize)\n        external\n        view\n        returns (address[] memory array, address next);\n}\n"
    },
    "@gnosis.pm/zodiac/contracts/interfaces/IGuard.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"@gnosis.pm/safe-contracts/contracts/common/Enum.sol\";\n\ninterface IGuard {\n    function checkTransaction(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address payable refundReceiver,\n        bytes memory signatures,\n        address msgSender\n    ) external;\n\n    function checkAfterExecution(bytes32 txHash, bool success) external;\n}\n"
    },
    "@gnosis.pm/zodiac/contracts/test/TestAvatar.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.8.0;\n\ncontract Enum {\n    enum Operation {\n        Call,\n        DelegateCall\n    }\n}\n\ncontract TestAvatar {\n    address public module;\n\n    receive() external payable {}\n\n    function enableModule(address _module) external {\n        module = _module;\n    }\n\n    function disableModule(address, address) external {\n        module = address(0);\n    }\n\n    function isModuleEnabled(address _module) external view returns (bool) {\n        if (module == _module) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function execTransactionFromModule(\n        address payable to,\n        uint256 value,\n        bytes calldata data,\n        uint8 operation\n    ) external returns (bool success) {\n        require(msg.sender == module, \"Not authorized\");\n        if (operation == 1) (success, ) = to.delegatecall(data);\n        else (success, ) = to.call{value: value}(data);\n    }\n\n    function execTransactionFromModuleReturnData(\n        address payable to,\n        uint256 value,\n        bytes calldata data,\n        uint8 operation\n    ) external returns (bool success, bytes memory returnData) {\n        require(msg.sender == module, \"Not authorized\");\n        if (operation == 1) (success, ) = to.delegatecall(data);\n        else (success, returnData) = to.call{value: value}(data);\n    }\n\n    function getModulesPaginated(address, uint256 pageSize)\n        external\n        view\n        returns (address[] memory array, address next)\n    {\n        // Init array with max page size\n        array = new address[](pageSize);\n\n        array[0] = module;\n        next = module;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\n * against this attack out of the box.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
    },
    "contracts/astrodrop/lib/Ownable.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\n// this contract has been copied from https://github.com/Astrodrop/shrine\n\npragma solidity ^0.8.11;\n\nabstract contract Ownable {\n    error Ownable_NotOwner();\n    error Ownable_NewOwnerZeroAddress();\n\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /// @dev Initializes the contract setting the deployer as the initial owner.\n    function __Ownable_init(address initialOwner) internal {\n        _transferOwnership(initialOwner);\n    }\n\n    /// @dev Returns the address of the current owner.\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /// @dev Throws if called by any account other than the owner.\n    modifier onlyOwner() {\n        if (owner() != msg.sender) revert Ownable_NotOwner();\n        _;\n    }\n\n    /// @dev Leaves the contract without owner. It will not be possible to call\n    /// `onlyOwner` functions anymore. Can only be called by the current owner.\n    /// NOTE: Renouncing ownership will leave the contract without an owner,\n    /// thereby removing any functionality that is only available to the owner.\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /// @dev Transfers ownership of the contract to a new account (`newOwner`).\n    /// Can only be called by the current owner.\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) revert Ownable_NewOwnerZeroAddress();\n        _transferOwnership(newOwner);\n    }\n\n    /// @dev Transfers ownership of the contract to a new account (`newOwner`).\n    /// Internal function without access restriction.\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/astrodrop/lib/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\n\n// this contract has been copied from https://github.com/Astrodrop/shrine\n\npragma solidity ^0.8.11;\n\n/// @notice Gas optimized reentrancy protection for smart contracts.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/ReentrancyGuard.sol)\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol)\nabstract contract ReentrancyGuard {\n    error ReentrancyGuard_Reentrancy();\n\n    uint256 private locked;\n\n    modifier nonReentrant() {\n        if (locked != 1) revert ReentrancyGuard_Reentrancy();\n\n        locked = 2;\n\n        _;\n\n        locked = 1;\n    }\n\n    function __ReentrancyGuard_init() internal {\n        locked = 1;\n    }\n}\n"
    },
    "contracts/astrodrop/Shrine.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\n\n// this contract has been copied from https://github.com/Astrodrop/shrine\n// the only change that has been made to the code is how the leafs of the merkle tree are constructed\n// this is to prevent second preimage attacks (https://flawed.net.nz/2018/02/21/attacking-merkle-trees-with-a-second-preimage-attack/)\n\n/**\n                                                                                                      \n                                                                                                      \n           .o.                    .                            .o8                                    \n          .888.                 .o8                           \"888                                    \n         .8\"888.      .oooo.o .o888oo oooo d8b  .ooooo.   .oooo888  oooo d8b  .ooooo.  oo.ooooo.      \n        .8' `888.    d88(  \"8   888   `888\"\"8P d88' `88b d88' `888  `888\"\"8P d88' `88b  888' `88b     \n       .88ooo8888.   `\"Y88b.    888    888     888   888 888   888   888     888   888  888   888     \n      .8'     `888.  o.  )88b   888 .  888     888   888 888   888   888     888   888  888   888     \n     o88o     o8888o 8\"\"888P'   \"888\" d888b    `Y8bod8P' `Y8bod88P\" d888b    `Y8bod8P'  888bod8P'     \n                                                                                        888           \n                                                                                       o888o          \n                                                                                                      \n                                                                                                      \n */\npragma solidity ^0.8.11;\n\nimport {MerkleProof} from \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\n\nimport \"solmate/src/tokens/ERC20.sol\";\nimport \"solmate/src/utils/SafeTransferLib.sol\";\n\nimport {Ownable} from \"./lib/Ownable.sol\";\nimport {ReentrancyGuard} from \"./lib/ReentrancyGuard.sol\";\n\n/// @title Shrine\n/// @author zefram.eth\n/// @notice A Shrine maintains a list of Champions with individual weights (shares), and anyone could\n/// offer any ERC-20 tokens to the Shrine in order to distribute them to the Champions proportional to their\n/// shares. A Champion transfer their right to claim all future tokens offered to\n/// the Champion to another address.\ncontract Shrine is Ownable, ReentrancyGuard {\n    /// -----------------------------------------------------------------------\n    /// Errors\n    /// -----------------------------------------------------------------------\n\n    error Shrine_AlreadyInitialized();\n    error Shrine_InputArraysLengthMismatch();\n    error Shrine_NotAuthorized();\n    error Shrine_InvalidMerkleProof();\n    error Shrine_LedgerZeroTotalShares();\n\n    /// -----------------------------------------------------------------------\n    /// Custom types\n    /// -----------------------------------------------------------------------\n\n    type Champion is address;\n    type Version is uint256;\n\n    /// -----------------------------------------------------------------------\n    /// Library usage\n    /// -----------------------------------------------------------------------\n\n    using SafeTransferLib for ERC20;\n\n    /// -----------------------------------------------------------------------\n    /// Events\n    /// -----------------------------------------------------------------------\n\n    event Offer(address indexed sender, ERC20 indexed token, uint256 amount);\n    event Claim(\n        address recipient,\n        Version indexed version,\n        ERC20 indexed token,\n        Champion indexed champion,\n        uint256 claimedTokenAmount\n    );\n    event ClaimFromMetaShrine(Shrine indexed metaShrine);\n    event TransferChampionStatus(Champion indexed champion, address recipient);\n    event UpdateLedger(Version indexed newVersion, Ledger newLedger);\n    event UpdateLedgerMetadata(\n        Version indexed version,\n        string newLedgerMetadataIPFSHash\n    );\n\n    /// -----------------------------------------------------------------------\n    /// Structs\n    /// -----------------------------------------------------------------------\n\n    /// @param version The Merkle tree version\n    /// @param token The ERC-20 token to be claimed\n    /// @param champion The Champion address. If the Champion rights have been transferred, the tokens will be sent to its owner.\n    /// @param shares The share amount of the Champion\n    /// @param merkleProof The Merkle proof showing the Champion is part of this Shrine's Merkle tree\n    struct ClaimInfo {\n        Version version;\n        ERC20 token;\n        Champion champion;\n        uint256 shares;\n        bytes32[] merkleProof;\n    }\n\n    /// @param metaShrine The shrine to claim from\n    /// @param version The Merkle tree version\n    /// @param token The ERC-20 token to be claimed\n    /// @param shares The share amount of the Champion\n    /// @param merkleProof The Merkle proof showing the Champion is part of this Shrine's Merkle tree\n    struct MetaShrineClaimInfo {\n        Shrine metaShrine;\n        Version version;\n        ERC20 token;\n        uint256 shares;\n        bytes32[] merkleProof;\n    }\n\n    struct Ledger {\n        bytes32 merkleRoot;\n        uint256 totalShares;\n    }\n\n    /// -----------------------------------------------------------------------\n    /// Storage variables\n    /// -----------------------------------------------------------------------\n\n    /// @notice The current version of the ledger, starting from 1\n    Version public currentLedgerVersion;\n\n    /// @notice version => ledger\n    mapping(Version => Ledger) public ledgerOfVersion;\n\n    /// @notice version => (token => (champion => claimedTokens))\n    mapping(Version => mapping(ERC20 => mapping(Champion => uint256)))\n        public claimedTokens;\n\n    /// @notice version => (token => offeredTokens)\n    mapping(Version => mapping(ERC20 => uint256)) public offeredTokens;\n\n    /// @notice champion => address\n    mapping(Champion => address) public championClaimRightOwner;\n\n    /// -----------------------------------------------------------------------\n    /// Initialization\n    /// -----------------------------------------------------------------------\n\n    /// @notice Initialize the Shrine contract.\n    /// @param initialGuardian The Shrine's initial guardian, who controls the ledger\n    /// @param initialLedger The Shrine's initial ledger with the distribution shares\n    /// @param initialLedgerMetadataIPFSHash The IPFS hash of the initial metadata\n    function initialize(\n        address initialGuardian,\n        Ledger calldata initialLedger,\n        string calldata initialLedgerMetadataIPFSHash\n    ) external {\n        // we use currentLedgerVersion as a flag for whether the Shrine\n        // has already been initialized\n        if (Version.unwrap(currentLedgerVersion) != 0) {\n            revert Shrine_AlreadyInitialized();\n        }\n\n        // 0 total shares makes no sense\n        if (initialLedger.totalShares == 0)\n            revert Shrine_LedgerZeroTotalShares();\n\n        __ReentrancyGuard_init();\n        __Ownable_init(initialGuardian);\n\n        // the version number start at 1\n        currentLedgerVersion = Version.wrap(1);\n        ledgerOfVersion[Version.wrap(1)] = initialLedger;\n\n        // emit event to let indexers pick up ledger & metadata IPFS hash\n        emit UpdateLedger(Version.wrap(1), initialLedger);\n        emit UpdateLedgerMetadata(\n            Version.wrap(1),\n            initialLedgerMetadataIPFSHash\n        );\n    }\n\n    /// -----------------------------------------------------------------------\n    /// User actions\n    /// -----------------------------------------------------------------------\n\n    /// @notice Offer ERC-20 tokens to the Shrine and distribute them to Champions proportional\n    /// to their shares in the Shrine. Callable by anyone.\n    /// @param token The ERC-20 token being offered to the Shrine\n    /// @param amount The amount of tokens to offer\n    function offer(ERC20 token, uint256 amount) external {\n        // -------------------------------------------------------------------\n        // State updates\n        // -------------------------------------------------------------------\n\n        // distribute tokens to Champions\n        offeredTokens[currentLedgerVersion][token] += amount;\n\n        // -------------------------------------------------------------------\n        // Effects\n        // -------------------------------------------------------------------\n\n        // transfer tokens from sender\n        token.safeTransferFrom(msg.sender, address(this), amount);\n\n        emit Offer(msg.sender, token, amount);\n    }\n\n    /// @notice Offer multiple ERC-20 tokens to the Shrine and distribute them to Champions proportional\n    /// to their shares in the Shrine. The input arrays must be of the same length. Callable by anyone.\n    /// @param versionList The list of ledger versions to distribute to\n    /// @param tokenList The list of ERC-20 tokens being offered to the Shrine\n    /// @param amountList The list of amounts of tokens to offer\n    function offerMultiple(\n        Version[] calldata versionList,\n        ERC20[] calldata tokenList,\n        uint256[] calldata amountList\n    ) external {\n        // -------------------------------------------------------------------\n        // Validation\n        // -------------------------------------------------------------------\n\n        if (\n            versionList.length != tokenList.length ||\n            versionList.length != amountList.length\n        ) {\n            revert Shrine_InputArraysLengthMismatch();\n        }\n\n        // -------------------------------------------------------------------\n        // State updates\n        // -------------------------------------------------------------------\n\n        for (uint256 i = 0; i < versionList.length; i++) {\n            // distribute tokens to Champions\n            offeredTokens[versionList[i]][tokenList[i]] += amountList[i];\n        }\n\n        // -------------------------------------------------------------------\n        // Effects\n        // -------------------------------------------------------------------\n\n        for (uint256 i = 0; i < versionList.length; i++) {\n            // transfer tokens from sender\n            tokenList[i].safeTransferFrom(\n                msg.sender,\n                address(this),\n                amountList[i]\n            );\n\n            emit Offer(msg.sender, tokenList[i], amountList[i]);\n        }\n    }\n\n    /// @notice A Champion or the owner of a Champion may call this to claim their share of the tokens offered to this Shrine.\n    /// Requires a Merkle proof to prove that the Champion is part of this Shrine's Merkle tree.\n    /// Only callable by the champion (if the right was never transferred) or the owner\n    /// (that the original champion transferred their rights to)\n    /// @param claimInfo The info of the claim\n    /// @return claimedTokenAmount The amount of tokens claimed\n    function claim(address recipient, ClaimInfo calldata claimInfo)\n        external\n        returns (uint256 claimedTokenAmount)\n    {\n        // -------------------------------------------------------------------\n        // Validation\n        // -------------------------------------------------------------------\n        \n        // verify sender auth\n        _verifyChampionOwnership(claimInfo.champion);\n\n        // verify Merkle proof that the champion is part of the Merkle tree\n        _verifyMerkleProof(\n            claimInfo.version,\n            claimInfo.champion,\n            claimInfo.shares,\n            claimInfo.merkleProof\n        );\n\n        // compute claimable amount\n        uint256 championClaimedTokens = claimedTokens[claimInfo.version][\n            claimInfo.token\n        ][claimInfo.champion];\n        claimedTokenAmount = _computeClaimableTokenAmount(\n            claimInfo.version,\n            claimInfo.token,\n            claimInfo.shares,\n            championClaimedTokens\n        );\n\n        // -------------------------------------------------------------------\n        // State updates\n        // -------------------------------------------------------------------\n\n        // record total tokens claimed by the champion\n        claimedTokens[claimInfo.version][claimInfo.token][claimInfo.champion] =\n            championClaimedTokens +\n            claimedTokenAmount;\n\n        // -------------------------------------------------------------------\n        // Effects\n        // -------------------------------------------------------------------\n\n        // transfer tokens to the recipient\n        claimInfo.token.safeTransfer(recipient, claimedTokenAmount);\n\n        emit Claim(\n            recipient,\n            claimInfo.version,\n            claimInfo.token,\n            claimInfo.champion,\n            claimedTokenAmount\n        );\n    }\n\n    /// @notice A variant of {claim} that combines multiple claims into a single call.\n    function claimMultiple(\n        address recipient,\n        ClaimInfo[] calldata claimInfoList\n    ) external returns (uint256[] memory claimedTokenAmountList) {\n        claimedTokenAmountList = new uint256[](claimInfoList.length);\n        for (uint256 i = 0; i < claimInfoList.length; i++) {\n            // -------------------------------------------------------------------\n            // Validation\n            // -------------------------------------------------------------------\n\n            // verify sender auth\n            _verifyChampionOwnership(claimInfoList[i].champion);\n\n            // verify Merkle proof that the champion is part of the Merkle tree\n            _verifyMerkleProof(\n                claimInfoList[i].version,\n                claimInfoList[i].champion,\n                claimInfoList[i].shares,\n                claimInfoList[i].merkleProof\n            );\n\n            // compute claimable amount\n            uint256 championClaimedTokens = claimedTokens[\n                claimInfoList[i].version\n            ][claimInfoList[i].token][claimInfoList[i].champion];\n            claimedTokenAmountList[i] = _computeClaimableTokenAmount(\n                claimInfoList[i].version,\n                claimInfoList[i].token,\n                claimInfoList[i].shares,\n                championClaimedTokens\n            );\n\n            // -------------------------------------------------------------------\n            // State updates\n            // -------------------------------------------------------------------\n\n            // record total tokens claimed by the champion\n            claimedTokens[claimInfoList[i].version][claimInfoList[i].token][\n                claimInfoList[i].champion\n            ] = championClaimedTokens + claimedTokenAmountList[i];\n        }\n\n        for (uint256 i = 0; i < claimInfoList.length; i++) {\n            // -------------------------------------------------------------------\n            // Effects\n            // -------------------------------------------------------------------\n\n            // transfer tokens to the recipient\n            claimInfoList[i].token.safeTransfer(\n                recipient,\n                claimedTokenAmountList[i]\n            );\n\n            emit Claim(\n                recipient,\n                claimInfoList[i].version,\n                claimInfoList[i].token,\n                claimInfoList[i].champion,\n                claimedTokenAmountList[i]\n            );\n        }\n    }\n\n    /// @notice A variant of {claim} that combines multiple claims for the same Champion & version into a single call.\n    /// @dev This is more efficient than {claimMultiple} since it only checks Champion ownership & verifies Merkle proof once.\n    function claimMultipleTokensForChampion(\n        address recipient,\n        Version version,\n        ERC20[] calldata tokenList,\n        Champion champion,\n        uint256 shares,\n        bytes32[] calldata merkleProof\n    ) external returns (uint256[] memory claimedTokenAmountList) {\n        // -------------------------------------------------------------------\n        // Validation\n        // -------------------------------------------------------------------\n\n        // verify sender auth\n        _verifyChampionOwnership(champion);\n\n        // verify Merkle proof that the champion is part of the Merkle tree\n        _verifyMerkleProof(version, champion, shares, merkleProof);\n\n        claimedTokenAmountList = new uint256[](tokenList.length);\n        for (uint256 i = 0; i < tokenList.length; i++) {\n            // compute claimable amount\n            uint256 championClaimedTokens = claimedTokens[version][\n                tokenList[i]\n            ][champion];\n            claimedTokenAmountList[i] = _computeClaimableTokenAmount(\n                version,\n                tokenList[i],\n                shares,\n                championClaimedTokens\n            );\n\n            // -------------------------------------------------------------------\n            // State updates\n            // -------------------------------------------------------------------\n\n            // record total tokens claimed by the champion\n            claimedTokens[version][tokenList[i]][champion] =\n                championClaimedTokens +\n                claimedTokenAmountList[i];\n        }\n\n        for (uint256 i = 0; i < tokenList.length; i++) {\n            // -------------------------------------------------------------------\n            // Effects\n            // -------------------------------------------------------------------\n\n            // transfer tokens to the recipient\n            tokenList[i].safeTransfer(recipient, claimedTokenAmountList[i]);\n\n            emit Claim(\n                recipient,\n                version,\n                tokenList[i],\n                champion,\n                claimedTokenAmountList[i]\n            );\n        }\n    }\n\n    /// @notice If this Shrine is a Champion of another Shrine (MetaShrine), calling this can claim the tokens\n    /// from the MetaShrine and distribute them to this Shrine's Champions. Callable by anyone.\n    /// @param claimInfo The info of the claim\n    /// @return claimedTokenAmount The amount of tokens claimed\n    function claimFromMetaShrine(MetaShrineClaimInfo calldata claimInfo)\n        external\n        nonReentrant\n        returns (uint256 claimedTokenAmount)\n    {\n        return _claimFromMetaShrine(claimInfo);\n    }\n\n    /// @notice A variant of {claimFromMetaShrine} that combines multiple claims into a single call.\n    function claimMultipleFromMetaShrine(\n        MetaShrineClaimInfo[] calldata claimInfoList\n    ) external nonReentrant returns (uint256[] memory claimedTokenAmountList) {\n        // claim and distribute tokens\n        claimedTokenAmountList = new uint256[](claimInfoList.length);\n        for (uint256 i = 0; i < claimInfoList.length; i++) {\n            claimedTokenAmountList[i] = _claimFromMetaShrine(claimInfoList[i]);\n        }\n    }\n\n    /// @notice Allows a champion to transfer their right to claim from this shrine to\n    /// another address. The champion will effectively lose their shrine membership, so\n    /// make sure the new owner is a trusted party.\n    /// Only callable by the champion (if the right was never transferred) or the owner\n    /// (that the original champion transferred their rights to)\n    /// @param champion The champion whose claim rights will be transferred away\n    /// @param newOwner The address that will receive all rights of the champion\n    function transferChampionClaimRight(Champion champion, address newOwner)\n        external\n    {\n        // -------------------------------------------------------------------\n        // Validation\n        // -------------------------------------------------------------------\n\n        // verify sender auth\n        _verifyChampionOwnership(champion);\n\n        // -------------------------------------------------------------------\n        // State updates\n        // -------------------------------------------------------------------\n\n        championClaimRightOwner[champion] = newOwner;\n        emit TransferChampionStatus(champion, newOwner);\n    }\n\n    /// -----------------------------------------------------------------------\n    /// Getters\n    /// -----------------------------------------------------------------------\n\n    /// @notice Computes the amount of a particular ERC-20 token claimable by a Champion from\n    /// a particular version of the Merkle tree.\n    /// @param version The Merkle tree version\n    /// @param token The ERC-20 token to be claimed\n    /// @param champion The Champion address\n    /// @param shares The share amount of the Champion\n    /// @return claimableTokenAmount The amount of tokens claimable\n    function computeClaimableTokenAmount(\n        Version version,\n        ERC20 token,\n        Champion champion,\n        uint256 shares\n    ) public view returns (uint256 claimableTokenAmount) {\n        return\n            _computeClaimableTokenAmount(\n                version,\n                token,\n                shares,\n                claimedTokens[version][token][champion]\n            );\n    }\n\n    /// @notice The Shrine Guardian's address (same as the contract owner)\n    /// @return The Guardian's address\n    function guardian() external view returns (address) {\n        return owner();\n    }\n\n    /// @notice The ledger at a particular version\n    /// @param version The version of the ledger to query\n    /// @return The ledger at the specified version\n    function getLedgerOfVersion(Version version)\n        external\n        view\n        returns (Ledger memory)\n    {\n        return ledgerOfVersion[version];\n    }\n\n    /// -----------------------------------------------------------------------\n    /// Guardian actions\n    /// -----------------------------------------------------------------------\n\n    /// @notice The Guardian may call this function to update the ledger, so that the list of\n    /// champions and the associated weights are updated.\n    /// @param newLedger The new Merkle tree to use for the list of champions and their shares\n    function updateLedger(Ledger calldata newLedger) external onlyOwner {\n        // 0 total shares makes no sense\n        if (newLedger.totalShares == 0) revert Shrine_LedgerZeroTotalShares();\n\n        Version newVersion = Version.wrap(\n            Version.unwrap(currentLedgerVersion) + 1\n        );\n        currentLedgerVersion = newVersion;\n        ledgerOfVersion[newVersion] = newLedger;\n\n        emit UpdateLedger(newVersion, newLedger);\n    }\n\n    /// @notice The Guardian may call this function to update the ledger metadata IPFS hash.\n    /// @dev This function simply emits the IPFS hash in an event, so that an off-chain indexer\n    /// can pick it up.\n    /// @param newLedgerMetadataIPFSHash The IPFS hash of the updated metadata\n    function updateLedgerMetadata(\n        Version version,\n        string calldata newLedgerMetadataIPFSHash\n    ) external onlyOwner {\n        emit UpdateLedgerMetadata(version, newLedgerMetadataIPFSHash);\n    }\n\n    /// -----------------------------------------------------------------------\n    /// Internal utilities\n    /// -----------------------------------------------------------------------\n\n    /// @dev Reverts if the sender isn't the champion or does not own the champion claim right\n    /// @param champion The champion whose ownership will be verified\n    function _verifyChampionOwnership(Champion champion) internal view {\n        {\n            address _championClaimRightOwner = championClaimRightOwner[\n                champion\n            ];\n            if (_championClaimRightOwner == address(0)) {\n                // claim right not transferred, sender should be the champion\n                if (msg.sender != Champion.unwrap(champion))\n                    revert Shrine_NotAuthorized();\n            } else {\n                // claim right transferred, sender should be the owner\n                if (msg.sender != _championClaimRightOwner)\n                    revert Shrine_NotAuthorized();\n            }\n        }\n    }\n\n    /// @dev Reverts if the champion is not part of the Merkle tree\n    /// @param version The Merkle tree version\n    /// @param champion The Champion address. If the Champion rights have been transferred, the tokens will be sent to its owner.\n    /// @param shares The share amount of the Champion\n    /// @param merkleProof The Merkle proof showing the Champion is part of this Shrine's Merkle tree\n    function _verifyMerkleProof(\n        Version version,\n        Champion champion,\n        uint256 shares,\n        bytes32[] calldata merkleProof\n    ) internal view {\n        if (\n            !MerkleProof.verify(\n                merkleProof,\n                ledgerOfVersion[version].merkleRoot,\n                keccak256(bytes.concat(keccak256(abi.encode(champion, shares)))) // keccak256(abi.encodePacked(champion, shares))\n            )\n        ) {\n            revert Shrine_InvalidMerkleProof();\n        }\n    }\n\n    /// @dev See {computeClaimableTokenAmount}\n    function _computeClaimableTokenAmount(\n        Version version,\n        ERC20 token,\n        uint256 shares,\n        uint256 claimedTokenAmount\n    ) internal view returns (uint256 claimableTokenAmount) {\n        uint256 totalShares = ledgerOfVersion[version].totalShares;\n        uint256 offeredTokenAmount = (offeredTokens[version][token] * shares) /\n            totalShares;\n\n        // rounding may cause (offeredTokenAmount < claimedTokenAmount)\n        // don't want to revert because of it\n        claimableTokenAmount = offeredTokenAmount >= claimedTokenAmount\n            ? offeredTokenAmount - claimedTokenAmount\n            : 0;\n    }\n\n    /// @dev See {claimFromMetaShrine}\n    function _claimFromMetaShrine(MetaShrineClaimInfo calldata claimInfo)\n        internal\n        returns (uint256 claimedTokenAmount)\n    {\n        // -------------------------------------------------------------------\n        // Effects\n        // -------------------------------------------------------------------\n\n        // claim tokens from the meta shrine\n        uint256 beforeBalance = claimInfo.token.balanceOf(address(this));\n        claimInfo.metaShrine.claim(\n            address(this),\n            ClaimInfo({\n                version: claimInfo.version,\n                token: claimInfo.token,\n                champion: Champion.wrap(address(this)),\n                shares: claimInfo.shares,\n                merkleProof: claimInfo.merkleProof\n            })\n        );\n        claimedTokenAmount =\n            claimInfo.token.balanceOf(address(this)) -\n            beforeBalance;\n\n        // -------------------------------------------------------------------\n        // State updates\n        // -------------------------------------------------------------------\n\n        // distribute tokens to Champions\n        offeredTokens[currentLedgerVersion][\n            claimInfo.token\n        ] += claimedTokenAmount;\n\n        emit Offer(\n            address(claimInfo.metaShrine),\n            claimInfo.token,\n            claimedTokenAmount\n        );\n        emit ClaimFromMetaShrine(claimInfo.metaShrine);\n    }\n}\n"
    },
    "contracts/interfaces/RealitioV3.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\n\n// this contract has been copied from https://github.com/gnosis/zodiac-module-reality\n\npragma solidity >=0.8.0;\n\ninterface RealitioV3 {\n    /// @notice Report whether the answer to the specified question is finalized\n    /// @param question_id The ID of the question\n    /// @return Return true if finalized\n    function isFinalized(bytes32 question_id) external view returns (bool);\n\n    /// @notice Return the final answer to the specified question, or revert if there isn't one\n    /// @param question_id The ID of the question\n    /// @return The answer formatted as a bytes32\n    function resultFor(bytes32 question_id) external view returns (bytes32);\n\n    /// @notice Returns the timestamp at which the question will be/was finalized\n    /// @param question_id The ID of the question\n    function getFinalizeTS(bytes32 question_id) external view returns (uint32);\n\n    /// @notice Returns whether the question is pending arbitration\n    /// @param question_id The ID of the question\n    function isPendingArbitration(bytes32 question_id)\n        external\n        view\n        returns (bool);\n\n    /// @notice Create a reusable template, which should be a JSON document.\n    /// Placeholders should use gettext() syntax, eg %s.\n    /// @dev Template data is only stored in the event logs, but its block number is kept in contract storage.\n    /// @param content The template content\n    /// @return The ID of the newly-created template, which is created sequentially.\n    function createTemplate(string calldata content) external returns (uint256);\n\n    /// @notice Returns the highest bond posted so far for a question\n    /// @param question_id The ID of the question\n    function getBond(bytes32 question_id) external view returns (uint256);\n\n    /// @notice Returns the questions's content hash, identifying the question content\n    /// @param question_id The ID of the question\n    function getContentHash(bytes32 question_id)\n        external\n        view\n        returns (bytes32);\n}\n\ninterface RealitioV3ETH is RealitioV3 {\n    /// @notice Ask a new question and return the ID\n    /// @dev Template data is only stored in the event logs, but its block number is kept in contract storage.\n    /// @param template_id The ID number of the template the question will use\n    /// @param question A string containing the parameters that will be passed into the template to make the question\n    /// @param arbitrator The arbitration contract that will have the final word on the answer if there is a dispute\n    /// @param timeout How long the contract should wait after the answer is changed before finalizing on that answer\n    /// @param opening_ts If set, the earliest time it should be possible to answer the question.\n    /// @param nonce A user-specified nonce used in the question ID. Change it to repeat a question.\n    /// @param min_bond The minimum bond that may be used for an answer.\n    /// @return The ID of the newly-created question, created deterministically.\n    function askQuestionWithMinBond(\n        uint256 template_id,\n        string memory question,\n        address arbitrator,\n        uint32 timeout,\n        uint32 opening_ts,\n        uint256 nonce,\n        uint256 min_bond\n    ) external payable returns (bytes32);\n}\n\ninterface RealitioV3ERC20 is RealitioV3 {\n    /// @notice Ask a new question and return the ID\n    /// @dev Template data is only stored in the event logs, but its block number is kept in contract storage.\n    /// @param template_id The ID number of the template the question will use\n    /// @param question A string containing the parameters that will be passed into the template to make the question\n    /// @param arbitrator The arbitration contract that will have the final word on the answer if there is a dispute\n    /// @param timeout How long the contract should wait after the answer is changed before finalizing on that answer\n    /// @param opening_ts If set, the earliest time it should be possible to answer the question.\n    /// @param nonce A user-specified nonce used in the question ID. Change it to repeat a question.\n    /// @param min_bond The minimum bond that may be used for an answer.\n    /// @param tokens Number of tokens sent\n    /// @return The ID of the newly-created question, created deterministically.\n    function askQuestionWithMinBondERC20(\n        uint256 template_id,\n        string memory question,\n        address arbitrator,\n        uint32 timeout,\n        uint32 opening_ts,\n        uint256 nonce,\n        uint256 min_bond,\n        uint256 tokens\n    ) external returns (bytes32);\n}\n"
    },
    "contracts/test/TestAvatar.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"@gnosis.pm/zodiac/contracts/test/TestAvatar.sol\";"
    },
    "contracts/test/TestToken.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity ^0.8.0;\n\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract TestToken is ERC20 {\n    constructor(string memory name_, string memory symbol_) ERC20(name_, symbol_) {}\n\n    function mint(address account, uint256 amount) public {\n        _mint(account, amount);\n    }\n}"
    },
    "contracts/zodiac/RealityModule.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\n\n// this contract has been copied from https://github.com/gnosis/zodiac-module-reality\n\npragma solidity >=0.8.0;\n\nimport \"@gnosis.pm/zodiac/contracts/core/Module.sol\";\nimport \"../interfaces/RealitioV3.sol\";\n\nabstract contract RealityModule is Module {\n    bytes32 public constant INVALIDATED =\n        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n    bytes32 public constant DOMAIN_SEPARATOR_TYPEHASH =\n        0x47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218;\n    // keccak256(\n    //     \"EIP712Domain(uint256 chainId,address verifyingContract)\"\n    // );\n\n    bytes32 public constant TRANSACTION_TYPEHASH =\n        0x72e9670a7ee00f5fbf1049b8c38e3f22fab7e9b85029e85cf9412f17fdd5c2ad;\n    // keccak256(\n    //     \"Transaction(address to,uint256 value,bytes data,uint8 operation,uint256 nonce)\"\n    // );\n\n    event ProposalQuestionCreated(\n        bytes32 indexed questionId,\n        string indexed proposalId\n    );\n    event ProposalExecuted(string proposalId, bytes32 txHash, uint256 txIndex);\n    event RealityModuleSetup(\n        address indexed initiator,\n        address indexed owner,\n        address indexed avatar,\n        address target\n    );\n    event OracleSet(RealitioV3 oracle);\n    event SetQuestionTimeout(uint32 questionTimeout);\n    event SetQuestionCooldown(uint32 questionCooldown);\n    event SetAnswerExpiration(uint32 answerExpiration);\n    event SetArbitrator(address indexed questionArbitrator);\n    event SetMinimumBond(uint256 minimumBond);\n    event SetTemplate(uint256 templateId);\n\n    RealitioV3 public oracle;\n    uint256 public template;\n    uint32 public questionTimeout;\n    uint32 public questionCooldown;\n    uint32 public answerExpiration;\n    address public questionArbitrator;\n    uint256 public minimumBond;\n\n    // Mapping of question hash to question id. Special case: INVALIDATED for question hashes that have been invalidated\n    mapping(bytes32 => bytes32) public questionIds;\n    // Mapping of questionHash to transactionHash to execution state\n    mapping(bytes32 => mapping(bytes32 => bool))\n        public executedProposalTransactions;\n\n    /// @param _owner Address of the owner\n    /// @param _avatar Address of the avatar (e.g. a Safe)\n    /// @param _target Address of the contract that will call exec function\n    /// @param _oracle Address of the oracle (e.g. Realitio)\n    /// @param timeout Timeout in seconds that should be required for the oracle\n    /// @param cooldown Cooldown in seconds that should be required after a oracle provided answer\n    /// @param expiration Duration that a positive answer of the oracle is valid in seconds (or 0 if valid forever)\n    /// @param bond Minimum bond that is required for an answer to be accepted\n    /// @param templateId ID of the template that should be used for proposal questions (see https://github.com/realitio/realitio-dapp#structuring-and-fetching-information)\n    /// @param arbitrator Address of the arbitrator that will secure the oracle resolution\n    /// @notice There need to be at least 60 seconds between end of cooldown and expiration\n    constructor(\n        address _owner,\n        address _avatar,\n        address _target,\n        RealitioV3 _oracle,\n        uint32 timeout,\n        uint32 cooldown,\n        uint32 expiration,\n        uint256 bond,\n        uint256 templateId,\n        address arbitrator\n    ) {\n        bytes memory initParams = abi.encode(\n            _owner,\n            _avatar,\n            _target,\n            _oracle,\n            timeout,\n            cooldown,\n            expiration,\n            bond,\n            templateId,\n            arbitrator\n        );\n        setUp(initParams);\n    }\n\n    function setUp(bytes memory initParams) public override {\n        (\n            address _owner,\n            address _avatar,\n            address _target,\n            RealitioV3 _oracle,\n            uint32 timeout,\n            uint32 cooldown,\n            uint32 expiration,\n            uint256 bond,\n            uint256 templateId,\n            address arbitrator\n        ) = abi.decode(\n                initParams,\n                (\n                    address,\n                    address,\n                    address,\n                    RealitioV3,\n                    uint32,\n                    uint32,\n                    uint32,\n                    uint256,\n                    uint256,\n                    address\n                )\n            );\n        __Ownable_init();\n        require(_avatar != address(0), \"Avatar can not be zero address\");\n        require(_target != address(0), \"Target can not be zero address\");\n        setAvatar(_avatar);\n        setTarget(_target);\n        setOracle(_oracle);\n        setAnswerExpiration(expiration);\n        setQuestionTimeout(timeout);\n        setQuestionCooldown(cooldown);\n        setArbitrator(arbitrator);\n        setMinimumBond(bond);\n        setTemplate(templateId);\n\n        transferOwnership(_owner);\n\n        emit RealityModuleSetup(msg.sender, _owner, avatar, target);\n    }\n\n    /// @dev Sets the `oracle` address\n    /// @param _oracle Address to be used as the oracle for this module\n    /// @notice This can only be called by the `owner`\n    function setOracle(RealitioV3 _oracle) public onlyOwner {\n        oracle = _oracle;\n        emit OracleSet(_oracle);\n    }\n\n    /// @dev Sets the question timeout\n    /// @param timeout Timeout, in seconds, between when an answer is set and when it is final\n    /// @notice This can only be called by the `owner`\n    /// @notice Timeout must be greater than `0`\n    function setQuestionTimeout(uint32 timeout) public onlyOwner {\n        require(timeout > 0, \"Timeout has to be greater 0\");\n        require(timeout < 365 days, \"timeout must be less than 365 days\"); \n        questionTimeout = timeout;\n        emit SetQuestionTimeout(timeout);\n    }\n\n    /// @dev Sets the cooldown before an answer is usable\n    /// @param cooldown Cooldown, in seconds, that should be required after a oracle provided answer\n    /// @notice This can only be called by the `owner`\n    /// @notice There need to be at least 60 seconds between end of cooldown and expiration\n    function setQuestionCooldown(uint32 cooldown) public onlyOwner {\n        uint32 expiration = answerExpiration;\n        require(\n            expiration == 0 || expiration - cooldown >= 60,\n            \"There need to be at least 60s between end of cooldown and expiration\"\n        );\n        questionCooldown = cooldown;\n        emit SetQuestionCooldown(cooldown);\n    }\n\n    /// @dev Sets the duration for which a positive answer is valid\n    /// @param expiration Duration that a positive answer of the oracle is valid, in seconds (or 0 if valid forever)\n    /// @notice A proposal with an expired answer is the same as a proposal that has been marked invalid\n    /// @notice There need to be at least 60 seconds between end of cooldown and expiration\n    /// @notice This can only be called by the `owner`\n    function setAnswerExpiration(uint32 expiration) public onlyOwner {\n        require(\n            expiration == 0 || expiration - questionCooldown >= 60,\n            \"There need to be at least 60s between end of cooldown and expiration\"\n        );\n        answerExpiration = expiration;\n        emit SetAnswerExpiration(expiration);\n    }\n\n    /// @dev Sets the question arbitrator that will be used for future questions\n    /// @param arbitrator Address of the arbitrator\n    /// @notice This can only be called by the `owner`\n    function setArbitrator(address arbitrator) public onlyOwner {\n        questionArbitrator = arbitrator;\n        emit SetArbitrator(arbitrator);\n    }\n\n    /// @dev Sets the minimum bond that is required for an answer to be accepted\n    /// @param bond Minimum bond that is required for an answer to be accepted\n    /// @notice This can only be called by the `owner`\n    function setMinimumBond(uint256 bond) public onlyOwner {\n        minimumBond = bond;\n        emit SetMinimumBond(bond);\n    }\n\n    /// @dev Sets the template that should be used for future questions\n    /// @param templateId ID of the template that should be used for proposal questions\n    /// @notice Check https://github.com/realitio/realitio-dapp#structuring-and-fetching-information for more information\n    /// @notice This can only be called by the `owner`\n    function setTemplate(uint256 templateId) public onlyOwner {\n        template = templateId;\n        emit SetTemplate(templateId);\n    }\n\n    /// @dev Function to add a proposal that should be considered for execution\n    /// @param proposalId Id that should identify the proposal uniquely\n    /// @param txHashes EIP-712 hashes of the transactions that should be executed\n    /// @notice The nonce used for the question by this function is always `0`\n    function addProposal(string memory proposalId, bytes32[] memory txHashes)\n        public\n    {\n        addProposalWithNonce(proposalId, txHashes, 0);\n    }\n\n    /// @dev Function to add a proposal that should be considered for execution\n    /// @param proposalId Id that should identify the proposal uniquely\n    /// @param txHashes EIP-712 hashes of the transactions that should be executed\n    /// @param nonce Nonce that should be used when asking the question on the oracle\n    function addProposalWithNonce(\n        string memory proposalId,\n        bytes32[] memory txHashes,\n        uint256 nonce\n    ) public {\n        // We generate the question string used for the oracle\n        string memory question = buildQuestion(proposalId, txHashes);\n        bytes32 questionHash = keccak256(bytes(question));\n        if (nonce > 0) {\n            // Previous nonce must have been invalidated by the oracle.\n            // However, if the proposal was internally invalidated, it should not be possible to ask it again.\n            bytes32 currentQuestionId = questionIds[questionHash];\n            require(\n                currentQuestionId != INVALIDATED,\n                \"This proposal has been marked as invalid\"\n            );\n            require(\n                oracle.resultFor(currentQuestionId) == INVALIDATED,\n                \"Previous proposal was not invalidated\"\n            );\n        } else {\n            require(\n                questionIds[questionHash] == bytes32(0),\n                \"Proposal has already been submitted\"\n            );\n        }\n        bytes32 expectedQuestionId = getQuestionId(question, nonce);\n        // Set the question hash for this question id\n        questionIds[questionHash] = expectedQuestionId;\n        bytes32 questionId = askQuestion(question, nonce);\n        require(expectedQuestionId == questionId, \"Unexpected question id\");\n        emit ProposalQuestionCreated(questionId, proposalId);\n    }\n\n    function askQuestion(string memory question, uint256 nonce)\n        internal\n        virtual\n        returns (bytes32);\n\n    /// @dev Marks a proposal as invalid, preventing execution of the connected transactions\n    /// @param proposalId Id that should identify the proposal uniquely\n    /// @param txHashes EIP-712 hashes of the transactions that should be executed\n    /// @notice This can only be called by the owner\n    function markProposalAsInvalid(\n        string memory proposalId,\n        bytes32[] memory txHashes // owner only is checked in markProposalAsInvalidByHash(bytes32)\n    ) public {\n        string memory question = buildQuestion(proposalId, txHashes);\n        bytes32 questionHash = keccak256(bytes(question));\n        markProposalAsInvalidByHash(questionHash);\n    }\n\n    /// @dev Marks a question hash as invalid, preventing execution of the connected transactions\n    /// @param questionHash Question hash calculated based on the proposal id and txHashes\n    /// @notice This can only be called by the owner\n    function markProposalAsInvalidByHash(bytes32 questionHash)\n        public\n        onlyOwner\n    {\n        questionIds[questionHash] = INVALIDATED;\n    }\n\n    /// @dev Marks a proposal with an expired answer as invalid, preventing execution of the connected transactions\n    /// @param questionHash Question hash calculated based on the proposal id and txHashes\n    function markProposalWithExpiredAnswerAsInvalid(bytes32 questionHash)\n        public\n    {\n        uint32 expirationDuration = answerExpiration;\n        require(expirationDuration > 0, \"Answers are valid forever\");\n        bytes32 questionId = questionIds[questionHash];\n        require(questionId != INVALIDATED, \"Proposal is already invalidated\");\n        require(\n            questionId != bytes32(0),\n            \"No question id set for provided proposal\"\n        );\n        require(\n            oracle.resultFor(questionId) == bytes32(uint256(1)),\n            \"Only positive answers can expire\"\n        );\n        uint32 finalizeTs = oracle.getFinalizeTS(questionId);\n        require(\n            finalizeTs + uint256(expirationDuration) < block.timestamp,\n            \"Answer has not expired yet\"\n        );\n        questionIds[questionHash] = INVALIDATED;\n    }\n\n    /// @dev Executes the transactions of a proposal via the target if accepted\n    /// @param proposalId Id that should identify the proposal uniquely\n    /// @param txHashes EIP-712 hashes of the transactions that should be executed\n    /// @param to Target of the transaction that should be executed\n    /// @param value Wei value of the transaction that should be executed\n    /// @param data Data of the transaction that should be executed\n    /// @param operation Operation (Call or Delegatecall) of the transaction that should be executed\n    /// @notice The txIndex used by this function is always `0`\n    function executeProposal(\n        string memory proposalId,\n        bytes32[] memory txHashes,\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation\n    ) public {\n        executeProposalWithIndex(\n            proposalId,\n            txHashes,\n            to,\n            value,\n            data,\n            operation,\n            0\n        );\n    }\n\n    /// @dev Executes the transactions of a proposal via the target if accepted\n    /// @param proposalId Id that should identify the proposal uniquely\n    /// @param txHashes EIP-712 hashes of the transactions that should be executed\n    /// @param to Target of the transaction that should be executed\n    /// @param value Wei value of the transaction that should be executed\n    /// @param data Data of the transaction that should be executed\n    /// @param operation Operation (Call or Delegatecall) of the transaction that should be executed\n    /// @param txIndex Index of the transaction hash in txHashes. This is used as the nonce for the transaction, to make the tx hash unique\n    function executeProposalWithIndex(\n        string memory proposalId,\n        bytes32[] memory txHashes,\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation,\n        uint256 txIndex\n    ) public {\n        // We use the hash of the question to check the execution state, as the other parameters might change, but the question not\n        bytes32 questionHash = keccak256(\n            bytes(buildQuestion(proposalId, txHashes))\n        );\n        // Lookup question id for this proposal\n        bytes32 questionId = questionIds[questionHash];\n        // Question hash needs to set to be eligible for execution\n        require(\n            questionId != bytes32(0),\n            \"No question id set for provided proposal\"\n        );\n        require(questionId != INVALIDATED, \"Proposal has been invalidated\");\n\n        bytes32 txHash = getTransactionHash(\n            to,\n            value,\n            data,\n            operation,\n            txIndex\n        );\n        require(txHashes[txIndex] == txHash, \"Unexpected transaction hash\");\n\n        // Check that the result of the question is 1 (true)\n        require(\n            oracle.resultFor(questionId) == bytes32(uint256(1)),\n            \"Transaction was not approved\"\n        );\n        uint256 minBond = minimumBond;\n        require(\n            minBond == 0 || minBond <= oracle.getBond(questionId),\n            \"Bond on question not high enough\"\n        );\n        uint32 finalizeTs = oracle.getFinalizeTS(questionId);\n        // The answer is valid in the time after the cooldown and before the expiration time (if set).\n        require(\n            finalizeTs + uint256(questionCooldown) < block.timestamp,\n            \"Wait for additional cooldown\"\n        );\n        uint32 expiration = answerExpiration;\n        require(\n            expiration == 0 ||\n                finalizeTs + uint256(expiration) >= block.timestamp,\n            \"Answer has expired\"\n        );\n        // Check this is either the first transaction in the list or that the previous question was already approved\n        require(\n            txIndex == 0 ||\n                executedProposalTransactions[questionHash][\n                    txHashes[txIndex - 1]\n                ],\n            \"Previous transaction not executed yet\"\n        );\n        // Check that this question was not executed yet\n        require(\n            !executedProposalTransactions[questionHash][txHash],\n            \"Cannot execute transaction again\"\n        );\n        // Mark transaction as executed\n        executedProposalTransactions[questionHash][txHash] = true;\n        // Execute the transaction via the target.\n        require(exec(to, value, data, operation), \"Module transaction failed\");\n        emit ProposalExecuted(proposalId, txHash, txIndex);\n    }\n\n    /// @dev Build the question by combining the proposalId and the hex string of the hash of the txHashes\n    /// @param proposalId Id of the proposal that proposes to execute the transactions represented by the txHashes\n    /// @param txHashes EIP-712 Hashes of the transactions that should be executed\n    function buildQuestion(string memory proposalId, bytes32[] memory txHashes)\n        public\n        pure\n        returns (string memory)\n    {\n        string memory txsHash = bytes32ToAsciiString(\n            keccak256(abi.encodePacked(txHashes))\n        );\n        return string(abi.encodePacked(proposalId, bytes3(0xe2909f), txsHash));\n    }\n\n    /// @dev Generate the question id.\n    /// @notice It is required that this is the same as for the oracle implementation used.\n    function getQuestionId(string memory question, uint256 nonce)\n        public\n        view\n        returns (bytes32)\n    {\n        // Ask the question with a starting time of 0, so that it can be immediately answered\n        bytes32 contentHash = keccak256(\n            abi.encodePacked(template, uint32(0), question)\n        );\n        return\n            keccak256(\n                abi.encodePacked(\n                    contentHash,\n                    questionArbitrator,\n                    questionTimeout,\n                    minimumBond,\n                    oracle,\n                    this,\n                    nonce\n                )\n            );\n    }\n\n    /// @dev Returns the chain id used by this contract.\n    function getChainId() public view returns (uint256) {\n        uint256 id;\n        // solium-disable-next-line security/no-inline-assembly\n        assembly {\n            id := chainid()\n        }\n        return id;\n    }\n\n    /// @dev Generates the data for the module transaction hash (required for signing)\n    function generateTransactionHashData(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation,\n        uint256 nonce\n    ) public view returns (bytes memory) {\n        uint256 chainId = getChainId();\n        bytes32 domainSeparator = keccak256(\n            abi.encode(DOMAIN_SEPARATOR_TYPEHASH, chainId, this)\n        );\n        bytes32 transactionHash = keccak256(\n            abi.encode(\n                TRANSACTION_TYPEHASH,\n                to,\n                value,\n                keccak256(data),\n                operation,\n                nonce\n            )\n        );\n        return\n            abi.encodePacked(\n                bytes1(0x19),\n                bytes1(0x01),\n                domainSeparator,\n                transactionHash\n            );\n    }\n\n    function getTransactionHash(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation,\n        uint256 nonce\n    ) public view returns (bytes32) {\n        return\n            keccak256(\n                generateTransactionHashData(to, value, data, operation, nonce)\n            );\n    }\n\n    function bytes32ToAsciiString(bytes32 _bytes)\n        internal\n        pure\n        returns (string memory)\n    {\n        bytes memory s = new bytes(64);\n        for (uint256 i = 0; i < 32; i++) {\n            uint8 b = uint8(bytes1(_bytes << (i * 8)));\n            uint8 hi = uint8(b) / 16;\n            uint8 lo = uint8(b) % 16;\n            s[2 * i] = char(hi);\n            s[2 * i + 1] = char(lo);\n        }\n        return string(s);\n    }\n\n    function char(uint8 b) internal pure returns (bytes1 c) {\n        if (b < 10) return bytes1(b + 0x30);\n        else return bytes1(b + 0x57);\n    }\n}\n"
    },
    "contracts/zodiac/RealityModuleERC20.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\n\n// this contract has been copied from https://github.com/gnosis/zodiac-module-reality\n\npragma solidity >=0.8.0;\n\nimport \"./RealityModule.sol\";\nimport \"../interfaces/RealitioV3.sol\";\n\ncontract RealityModuleERC20 is RealityModule {\n    /// @param _owner Address of the owner\n    /// @param _avatar Address of the avatar (e.g. a Safe)\n    /// @param _target Address of the contract that will call exec function\n    /// @param _oracle Address of the oracle (e.g. Realitio)\n    /// @param timeout Timeout in seconds that should be required for the oracle\n    /// @param cooldown Cooldown in seconds that should be required after a oracle provided answer\n    /// @param expiration Duration that a positive answer of the oracle is valid in seconds (or 0 if valid forever)\n    /// @param bond Minimum bond that is required for an answer to be accepted\n    /// @param templateId ID of the template that should be used for proposal questions (see https://github.com/realitio/realitio-dapp#structuring-and-fetching-information)\n    /// @param arbitrator Address of the arbitrator that will secure the oracle resolution\n    /// @notice There need to be at least 60 seconds between end of cooldown and expiration\n    constructor(\n        address _owner,\n        address _avatar,\n        address _target,\n        RealitioV3 _oracle,\n        uint32 timeout,\n        uint32 cooldown,\n        uint32 expiration,\n        uint256 bond,\n        uint256 templateId,\n        address arbitrator\n    )\n        RealityModule(\n            _owner,\n            _avatar,\n            _target,\n            _oracle,\n            timeout,\n            cooldown,\n            expiration,\n            bond,\n            templateId,\n            arbitrator\n        )\n    {}\n\n    function askQuestion(string memory question, uint256 nonce)\n        internal\n        override\n        returns (bytes32)\n    {\n        // Ask the question with a starting time of 0, so that it can be immediately answered\n        return\n            RealitioV3ERC20(address(oracle)).askQuestionWithMinBondERC20(\n                template,\n                question,\n                questionArbitrator,\n                questionTimeout,\n                0,\n                nonce,\n                minimumBond,\n                0\n            );\n    }\n}\n"
    },
    "contracts/zodiac/RealityModuleETH.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\n\n// this contract has been copied from https://github.com/gnosis/zodiac-module-reality\n\npragma solidity >=0.8.0;\n\nimport \"./RealityModule.sol\";\nimport \"../interfaces/RealitioV3.sol\";\n\ncontract RealityModuleETH is RealityModule {\n    /// @param _owner Address of the owner\n    /// @param _avatar Address of the avatar (e.g. a Safe)\n    /// @param _target Address of the contract that will call exec function\n    /// @param _oracle Address of the oracle (e.g. Realitio)\n    /// @param timeout Timeout in seconds that should be required for the oracle\n    /// @param cooldown Cooldown in seconds that should be required after a oracle provided answer\n    /// @param expiration Duration that a positive answer of the oracle is valid in seconds (or 0 if valid forever)\n    /// @param bond Minimum bond that is required for an answer to be accepted\n    /// @param templateId ID of the template that should be used for proposal questions (see https://github.com/realitio/realitio-dapp#structuring-and-fetching-information)\n    /// @param arbitrator Address of the arbitrator that will secure the oracle resolution\n    /// @notice There need to be at least 60 seconds between end of cooldown and expiration\n    constructor(\n        address _owner,\n        address _avatar,\n        address _target,\n        RealitioV3 _oracle,\n        uint32 timeout,\n        uint32 cooldown,\n        uint32 expiration,\n        uint256 bond,\n        uint256 templateId,\n        address arbitrator\n    )\n        RealityModule(\n            _owner,\n            _avatar,\n            _target,\n            _oracle,\n            timeout,\n            cooldown,\n            expiration,\n            bond,\n            templateId,\n            arbitrator\n        )\n    {}\n\n    function askQuestion(string memory question, uint256 nonce)\n        internal\n        override\n        returns (bytes32)\n    {\n        // Ask the question with a starting time of 0, so that it can be immediately answered\n        return\n            RealitioV3ETH(address(oracle)).askQuestionWithMinBond(\n                template,\n                question,\n                questionArbitrator,\n                questionTimeout,\n                0,\n                nonce,\n                minimumBond\n            );\n    }\n}\n"
    },
    "solmate/src/tokens/ERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\nabstract contract ERC20 {\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n\n    /*//////////////////////////////////////////////////////////////\n                            METADATA STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    string public name;\n\n    string public symbol;\n\n    uint8 public immutable decimals;\n\n    /*//////////////////////////////////////////////////////////////\n                              ERC20 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 public totalSupply;\n\n    mapping(address => uint256) public balanceOf;\n\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    /*//////////////////////////////////////////////////////////////\n                            EIP-2612 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    uint256 internal immutable INITIAL_CHAIN_ID;\n\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\n\n    mapping(address => uint256) public nonces;\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals\n    ) {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n\n        INITIAL_CHAIN_ID = block.chainid;\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               ERC20 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\n        allowance[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n\n        return true;\n    }\n\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\n        balanceOf[msg.sender] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(msg.sender, to, amount);\n\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual returns (bool) {\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\n\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\n\n        balanceOf[from] -= amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        return true;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             EIP-2612 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\n\n        // Unchecked because the only math done is incrementing\n        // the owner's nonce which cannot realistically overflow.\n        unchecked {\n            address recoveredAddress = ecrecover(\n                keccak256(\n                    abi.encodePacked(\n                        \"\\x19\\x01\",\n                        DOMAIN_SEPARATOR(),\n                        keccak256(\n                            abi.encode(\n                                keccak256(\n                                    \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n                                ),\n                                owner,\n                                spender,\n                                value,\n                                nonces[owner]++,\n                                deadline\n                            )\n                        )\n                    )\n                ),\n                v,\n                r,\n                s\n            );\n\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNER\");\n\n            allowance[recoveredAddress][spender] = value;\n        }\n\n        emit Approval(owner, spender, value);\n    }\n\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\n    }\n\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n                    keccak256(bytes(name)),\n                    keccak256(\"1\"),\n                    block.chainid,\n                    address(this)\n                )\n            );\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        INTERNAL MINT/BURN LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function _mint(address to, uint256 amount) internal virtual {\n        totalSupply += amount;\n\n        // Cannot overflow because the sum of all user\n        // balances can't exceed the max uint256 value.\n        unchecked {\n            balanceOf[to] += amount;\n        }\n\n        emit Transfer(address(0), to, amount);\n    }\n\n    function _burn(address from, uint256 amount) internal virtual {\n        balanceOf[from] -= amount;\n\n        // Cannot underflow because a user's balance\n        // will never be larger than the total supply.\n        unchecked {\n            totalSupply -= amount;\n        }\n\n        emit Transfer(from, address(0), amount);\n    }\n}\n"
    },
    "solmate/src/utils/SafeTransferLib.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\nimport {ERC20} from \"../tokens/ERC20.sol\";\n\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\nlibrary SafeTransferLib {\n    /*//////////////////////////////////////////////////////////////\n                             ETH OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function safeTransferETH(address to, uint256 amount) internal {\n        bool success;\n\n        assembly {\n            // Transfer the ETH and store if it succeeded or not.\n            success := call(gas(), to, amount, 0, 0, 0, 0)\n        }\n\n        require(success, \"ETH_TRANSFER_FAILED\");\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            ERC20 OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function safeTransferFrom(\n        ERC20 token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), from) // Append the \"from\" argument.\n            mstore(add(freeMemoryPointer, 36), to) // Append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \"amount\" argument.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\n            )\n        }\n\n        require(success, \"TRANSFER_FROM_FAILED\");\n    }\n\n    function safeTransfer(\n        ERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), to) // Append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \"amount\" argument.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\n            )\n        }\n\n        require(success, \"TRANSFER_FAILED\");\n    }\n\n    function safeApprove(\n        ERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        bool success;\n\n        assembly {\n            // Get a pointer to some free memory.\n            let freeMemoryPointer := mload(0x40)\n\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\n            mstore(add(freeMemoryPointer, 4), to) // Append the \"to\" argument.\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \"amount\" argument.\n\n            success := and(\n                // Set success to whether the call reverted, if not we check it either\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\n                // Counterintuitively, this call must be positioned second to the or() call in the\n                // surrounding and() call or else returndatasize() will be zero during the computation.\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\n            )\n        }\n\n        require(success, \"APPROVE_FAILED\");\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}